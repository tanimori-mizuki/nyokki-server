package com.example.mapper;

import com.example.domain.User;
import com.example.domain.UserExample;
import com.example.dto.AllUserDto;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

/**
 * XMLファイル上のSQLを呼び出すクラス(myBatisGeneratorで自動生成)
 * 
 * @author fuka DIコンテナに入れるため、手動でアノテーションを追加
 */
/**
 * @author rinashioda
 *
 */
/**
 * @author rinashioda
 *
 */
@Mapper
public interface UserMapper {

	/**
	 * 全てのusersデータを出力する(NOT generated by MyBatis Generator)
	 * 
	 * @return usersデータ一覧
	 */
	List<User> findAll();

	List<User> findAllUser();

	/**
	 * gmailでログインしているユーザを検索
	 * 
	 * @param gmail Gmailアドレス
	 * @return ユーザ情報
	 */
	User findByGmail(String gmail);

	/**
	 * ログインユーザIDで他のユーザを検索
	 * 
	 * @param id ログインユーザID
	 * @return 全ユーザ情報
	 */
	List<AllUserDto> usersInformation(Integer id);
	
	/**
	 * フォローリストを全件取得
	 * 
	 * @param id
	 * @return
	 */
	List<AllUserDto> allFollowList(Integer id);

	/**
	 * フォロー中のユーザリストを取得
	 * 
	 * @param id ログインユーザID
	 * @return フォロー中のユーザ情報
	 */
	List<AllUserDto> followUserList(Integer id);

	/**
	 * フォロワーリストを取得
	 * 
	 * @param id ログインユーザID
	 * @return フォロワーユーザ情報
	 */
	List<AllUserDto> followerUserList(Integer id);
	

	/**
	 * ユーザーIDとログインユーザーIDで他のユーザーを一件検索
	 * 
	 * @param id　ユーザID
	 * @param followingId　フォローID（ログインユーザID）
	 * @return
	 */
	AllUserDto findUserByFollowingIdAndUserId(Integer id,Integer followingId);

	int countByExample(UserExample example);

	int deleteByExample(UserExample example);

	int deleteByPrimaryKey(Integer id);

	int insert(User record);

	int insertSelective(User record);

	List<User> selectByExample(UserExample example);

	User selectByPrimaryKey(Integer id); // アップデートしたものをリターン

	int updateByExampleSelective(@Param("record") User record, @Param("example") UserExample example);

	int updateByExample(@Param("record") User record, @Param("example") UserExample example);

	int updateByPrimaryKeySelective(User record);

	int updateByPrimaryKey(User record); // アップデートする
}